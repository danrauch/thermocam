import { Button }  from "std-widgets.slint";

global Palette := {
    property <color> window-background: #2e3440;
    property <color> widget-background: #4c566a;
    property <color> widget-stroke: #eceff4;
    property <color> window-border: #d8dee9;
    property <color> text-color: #eceff4;
    property <color> hyper-blue: #5e81ac;
}

MainWindow := Window {
    background: Palette.window-background;

    width: 480px;
    height: 320px;

    property thermo_image <=> thermo_image.source;
    property scale_image <=> scale_image.source;
    
    property max_temp_text <=> max_temp_text.text;
    property mean_temp_text <=> mean_temp_text.text;
    property min_temp_text <=> min_temp_text.text;

    property lower_scale_temp_text <=> lower_scale_temp_text.text;
    property upper_scale_temp_text <=> upper_scale_temp_text.text;
    
    callback autoscale-toggled(bool);
    callback manual-scale-max-temp-increased();
    callback manual-scale-max-temp-decreased();
    callback manual-scale-min-temp-increased();
    callback manual-scale-min-temp-decreased();

    HorizontalLayout {
        VerticalLayout { 
            spacing: 3px;
            HorizontalLayout { 
                thermo_image := Image {
                    width: 320px;
                    height: 240px;
                }  // expected size: 320x240
                VerticalLayout {    
                    spacing: 1px;  
                    padding-left: 3px;             
                    padding-right: 3px;
                    upper_scale_temp_text := Text {
                        color: Palette.text-color;
                        vertical-alignment: TextVerticalAlignment.center;
                        horizontal-alignment: TextHorizontalAlignment.center;
                    }
                    scale_image := Image{}
                    lower_scale_temp_text := Text {
                        color: Palette.text-color;
                        vertical-alignment: TextVerticalAlignment.center;
                        horizontal-alignment: TextHorizontalAlignment.center;
                    }
                }
            }
            Rectangle { 
                x: 3px;
                height: 1px;
                background: black;
            }
            HorizontalLayout { 
                min_temp_text := Text {
                    color: Palette.text-color;
                    vertical-alignment: TextVerticalAlignment.center;
                    horizontal-alignment: TextHorizontalAlignment.center;
                }
                mean_temp_text := Text {
                    color: Palette.text-color;
                    vertical-alignment: TextVerticalAlignment.center;
                    horizontal-alignment: TextHorizontalAlignment.center;
                }
                max_temp_text := Text {
                    color: Palette.text-color;
                    vertical-alignment: TextVerticalAlignment.center;
                    horizontal-alignment: TextHorizontalAlignment.center;
                }
            }
        }
        VerticalLayout { 
            max-width: 125px;

            autoscale_button := Button {
                background: self.checked ? Palette.widget-background.darker(30%) : Palette.widget-background; 
                border-width: 0px;     
                border-radius: 0px;                        
                text: "Autoscale";
                min-width: 0px;
                checked: true;
                checkable: true;
                clicked => { autoscale-toggled(self.checked) }
            }
            HorizontalLayout {
                Button {
                    background: self.enabled ? self.pressed ? Palette.widget-background.darker(30%) : Palette.widget-background : Palette.widget-background.darker(90%);
                    enabled: !autoscale_button.checked;
                    min-width: 0px;
                    border-width: 0px;  
                    border-radius: 0px;   
                    text: "Min -";
                    clicked => { manual-scale-min-temp-decreased() }
                }
                Button {
                    background: self.enabled ? self.pressed ? Palette.widget-background.darker(30%) : Palette.widget-background : Palette.widget-background.darker(90%);
                    enabled: !autoscale_button.checked;
                    min-width: 0px;
                    border-width: 0px;  
                    border-radius: 0px;   
                    text: "Min +";
                    clicked => { manual-scale-min-temp-increased() }
                }                
            }
            HorizontalLayout { 
                Button {
                    background: self.enabled ? self.pressed ? Palette.widget-background.darker(30%) : Palette.widget-background : Palette.widget-background.darker(90%);
                    enabled: !autoscale_button.checked;
                    min-width: 0px;
                    border-width: 0px;  
                    border-radius: 0px;   
                    text: "Max -";
                    clicked => { manual-scale-max-temp-decreased() }
                }   
                Button { 
                    background: self.enabled ? self.pressed ? Palette.widget-background.darker(30%) : Palette.widget-background : Palette.widget-background.darker(90%);
                    enabled: !autoscale_button.checked;
                    min-width: 0px;
                    border-width: 0px;  
                    border-radius: 0px;   
                    text: "Max +";
                    clicked => { manual-scale-max-temp-increased() }
                }                
            }
        }
    }
}